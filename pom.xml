<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>source.hanger</groupId>
    <artifactId>dfnet-java</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <maven.compiler.source>21</maven.compiler.source> <!-- 兼容性考虑，使用Java 21 -->
        <maven.compiler.target>21</maven.compiler.target>
        <jna.version>5.14.0</jna.version> <!-- JNA 版本 -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <lombok.version>1.18.38</lombok.version> <!-- 使用最新的 Lombok 版本 -->
        <slf4j.version>1.7.32</slf4j.version> <!-- SLF4J API 版本 -->
        <logback.version>1.2.11</logback.version> <!-- Logback 版本 -->
        <agrona.version>2.2.4</agrona.version>
        <lib.path.os>unknown</lib.path.os> <!-- 默认的操作系统库路径 -->
        <lib.path.arch>unknown-arch</lib.path.arch> <!-- 默认的架构库路径 -->
    </properties>

    <dependencies>
        <!-- JNA Core -->
        <dependency>
            <groupId>net.java.dev.jna</groupId>
            <artifactId>jna</artifactId>
            <version>${jna.version}</version>
        </dependency>
        <!-- JNA Platform (可选，提供更多平台特定功能) -->
        <dependency>
            <groupId>net.java.dev.jna</groupId>
            <artifactId>jna-platform</artifactId>
            <version>${jna.version}</version>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
        </dependency>
        <!-- SLF4J API -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j.version}</version>
        </dependency>
        <!-- Logback Classic (SLF4J 的实现) -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>${logback.version}</version>
        </dependency>

        <!-- Agrona 高性能并发数据结构 -->
        <dependency>
            <groupId>org.agrona</groupId>
            <artifactId>agrona</artifactId>
            <version>${agrona.version}</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!-- Maven Compiler Plugin -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.11.0</version> <!-- 使用较新版本 -->
                <configuration>
                    <source>${maven.compiler.source}</source>
                    <target>${maven.compiler.target}</target>
                </configuration>
            </plugin>

            <!-- Maven Exec Plugin - 用于运行Java主类 -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>3.1.0</version> <!-- 使用较新版本 -->
                <executions>
                    <execution>
                        <goals>
                            <goal>java</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <mainClass>source.hanger.demo.RealtimeDenoiseDemo</mainClass> <!-- 运行流式示例 -->
                    <arguments>
                        <!-- 可以将命令行参数传递给主类，例如模型路径 -->
                        <!-- <argument>value</argument> -->
                    </arguments>
                    <systemProperties>
                        <systemProperty>
                            <key>jna.library.path</key>
                            <value>${project.basedir}/lib/${lib.path.os}/${lib.path.arch}
                            </value> <!-- 调整路径结构以匹配 'lib/os/arch' 格式 -->
                        </systemProperty>
                    </systemProperties>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <!-- macOS Profile -->
        <profile>
            <id>macos</id>
            <activation>
                <os>
                    <family>mac</family>
                </os>
            </activation>
            <properties>
                <lib.path.os>macos</lib.path.os>
                <lib.path.arch>${os.arch}</lib.path.arch> <!-- Maven 会自动处理 os.arch 的小写 -->
            </properties>
        </profile>
        <!-- Linux Profile -->
        <profile>
            <id>linux</id>
            <activation>
                <os>
                    <family>unix</family>
                    <name>linux</name>
                </os>
            </activation>
            <properties>
                <lib.path.os>linux</lib.path.os>
                <lib.path.arch>${os.arch}</lib.path.arch> <!-- Maven 会自动处理 os.arch 的小写 -->
            </properties>
        </profile>
        <!-- Windows Profile (如果需要) -->
        <!--
        <profile>
            <id>windows</id>
            <activation>
                <os>
                    <family>windows</family>
                </os>
            </activation>
            <properties>
                <lib.path.os>windows</lib.path.os>
                <lib.path.arch>${os.arch}</lib.path.arch> // Maven 会自动处理 os.arch 的小写
            </properties>
        </profile>
        -->
    </profiles>
</project>
